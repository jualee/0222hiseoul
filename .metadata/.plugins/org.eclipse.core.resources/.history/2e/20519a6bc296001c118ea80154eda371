package com.hiseoul.ml.service;

import java.util.List;
import java.util.Optional;

import org.apache.logging.log4j.LogManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hiseoul.ml.enumpkg.ServiceResult;
import com.hiseoul.ml.model.CctvInfo;
import com.hiseoul.ml.model.ErrorResponse;
import com.hiseoul.ml.model.MlCase;
import com.hiseoul.ml.model.Result;
import com.hiseoul.ml.repositories.CctvInfoRepository;
import com.hiseoul.ml.repositories.MlCaseRepository;

@Service
public class MlCaseServiceImpl implements MlCaseService{
	private static final org.apache.logging.log4j.Logger 
Logger=LogManager.getLogger(MlCaseServiceImpl.class);
	
	@Autowired
	MlCaseRepository repository;
	
	public Result updateMlcase(MlCase mlcase) {
		Optional<MlCase>search = repository.findById(mlcase.getMl_case_uuid());
		Result result = new Result();
		
		if(search.isPresent()) {
			mlcase = repository.save(mlcase);
			result.setPayload(mlcase);
		}else {
			result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
		}
		return result;
		
	}
	
	public Result deleteMlcase(String ml_case_uuid ) {
		Result result = new Result();
		boolean isPresent = repository.findById(ml_case_uuid).isPresent();

		
		if(!isPresent) {
			result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
			
		}else {
			repository.deleteById(ml_case_uuid );
		}
		return result;	
	}
	
	@Override
	public Result createMlcase(MlCase mlcase) {
			mlcase = repository.save(mlcase);
			Result result = new Result();
			result.setPayload(mlcase);
			return result;
	}
	
	@Override
	public Result retrieveMlcaseList() {
			List<MlCase> list= repository.findAllByOrderByml_case_write_dateDesc();
			Result result = new Result();
			result.setPayload(list);
			return result;

	}
	
	@Override
	public Result retrieveMlcase(String ml_case_uuid ) {
			Optional<MlCase> optionalMlCase= repository.findById(ml_case_uuid);
			Result result = new Result();
			
			if(optionalMlCase.isPresent()) {
				result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
			}
			return result;
	}

}