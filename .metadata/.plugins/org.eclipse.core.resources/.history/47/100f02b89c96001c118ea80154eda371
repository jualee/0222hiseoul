package com.hiseoul.ml.service;

import java.util.List;
import java.util.Optional;

import org.apache.logging.log4j.LogManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.hiseoul.ml.enumpkg.ServiceResult;
import com.hiseoul.ml.model.BizModel;
import com.hiseoul.ml.model.CctvInfo;
import com.hiseoul.ml.model.ErrorResponse;
import com.hiseoul.ml.model.Result;
import com.hiseoul.ml.repositories.BizModelRepository;

public class BizModelServiceImpl implements BizModelService{
	private static final org.apache.logging.log4j.Logger 
	Logger=LogManager.getLogger(BizModelServiceImpl.class);
	
	@Autowired
	BizModelRepository repository;
	
	public Result updateBizModel(BizModel bizmodel) {
		Optional<BizModel> searchOptional =repository.findById(bizmodel.getBiz_model_uuid());
		Result result =new Result();

		if(searchOptional.isPresent() ) {
			bizmodel = repository.save(bizmodel);
			result.setPayload(bizmodel);
		}else {
			result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
		}
		return result;
	}
	
	public Result deleteBizModel(String biz_model_uuid) {
		Result result =new Result();
		boolean isPresant = repository.findById(biz_model_uuid).isPresent();
		
		if(!isPresant) {
			result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
		}else {
			repository.deleteById(biz_model_uuid);
		}
		return result;
	}

	@Override
	public Result createBizModel(BizModel bizmodel) {
			cctvinfo = repository.save(cctvinfo);
			Result result = new Result();
			result.setPayload(cctvinfo);
			return result;
	}
	
	@Override
	public Result retrieveCctvInfoList() {
			List<CctvInfo> list= repository.findAllByOrderBycctv_uuidDesc();
			Result result = new Result();
			result.setPayload(list);
			return result;

	}
	
	@Override
	public Result retrieveCctvInfo(String cctv_uuid) {
			Optional<CctvInfo> optionalCctvInfo= repository.findById(cctv_uuid);
			Result result = new Result();
			
			if(optionalCctvInfo.isPresent()) {
				result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
			}
			return result;
	}

}
