package com.hiseoul.ml.service;

import java.util.List;
import java.util.Optional;

import org.apache.logging.log4j.LogManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hiseoul.ml.enumpkg.ServiceResult;
import com.hiseoul.ml.model.ErrorResponse;
import com.hiseoul.ml.model.Region;
import com.hiseoul.ml.model.Result;
import com.hiseoul.ml.repositories.RegionRepository;

@Service
public class RegionServiceImpl implements RegionService{
	private static final org.apache.logging.log4j.Logger 
Logger=LogManager.getLogger(RegionServiceImpl.class);
	
	@Autowired
	RegionRepository repository;
	
	public Result updateRegion(Region region) {
		Optional<Region> search = repository.findById(region.getRegion_uuid());
		Result result = new Result();
		
		if(search.isPresent()) {
			region = repository.save(region);
			result.setPayload(region);
		}else {
			result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
		}
		return result;
		
	}
	
	public Result deleteRegion(String region_uuid) {
		Result result = new Result();
		boolean isPresent = repository.findById(region_uuid).isPresent();

		
		if(!isPresent) {
			result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
			
		}else {
			repository.deleteById(region_uuid);
		}
		return result;	
	}
	
	@Override
	public Result createRegion(Region region) {
			region = repository.save(region);
			Result result = new Result();
			result.setPayload(region);
			return result;
	}
	
	@Override
	public Result retrieveRegionList() {
			List<Region> list= repository.findAllByOrderByregion_uuidDesc();
			Result result = new Result();
			result.setPayload(list);
			return result;

	}
	
	@Override
	public Result retrieveRegion(String region_uuid) {
			Optional<CctvInfo> optionalCctvInfo= repository.findById(cctv_uuid);
			Result result = new Result();
			
			if(optionalCctvInfo.isPresent()) {
				result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
			}
			return result;
	}

}