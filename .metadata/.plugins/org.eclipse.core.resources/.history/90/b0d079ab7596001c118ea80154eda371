//CctvInfoServiceImpl.java

package com.hiseoul.ml.service;

import java.util.List;
import java.util.Optional;

import org.apache.logging.log4j.LogManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hiseoul.ml.enumpkg.ServiceResult;
import com.hiseoul.ml.model.Board;
import com.hiseoul.ml.model.CctvInfo;
import com.hiseoul.ml.model.ErrorResponse;
import com.hiseoul.ml.model.Result;
import com.hiseoul.ml.repositories.BoardRepository;
import com.hiseoul.ml.repositories.CctvInfoRepository;

@Service
public class CctvInfoServiceImpl implements CctvInfoService{
	private static final org.apache.logging.log4j.Logger Logger=LogManager.getLogger(CctvInfoServiceImpl.class);
	
	@Autowired
	CctvInfoRepository repository;
	
	public Result updateCctvInfo(CctvInfo cctvinfo) {
		Optional<CctvInfo> search = repository.findById(cctvinfo.getCctv_uuid());
		Result result = new Result();
		
		if(search.isPresent()) {
			cctvinfo = repository.save(cctvinfo);
			result.setPayload(cctvinfo);
		}else {
			result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
		}
		return result;
		
	}
	
	public Result deleteCctvInfo(String cctv_uuid) {
		Result result = new Result();
		boolean isPresent = repository.findById(cctv_uuid).isPresent();

		
		if(!isPresent) {
			result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
			
		}else {
			repository.deleteById(cctv_uuid);
		}
		return result;	
	}
	
	@Override
	public Result createBoard(Board board) {
			board = repository.save(board);
			Result result = new Result();
			result.setPayload(board);
			return result;
	}
	
	@Override
	public Result createCctvInfo(CctvInfoServiceImpl cctvinfo) {
			List<Board> list = repository.findAllByOrderByBoardnoDesc();
			Result result = new Result();
			result.setPayload(list);
			return result;
	}
	
	@Override
	public Result retrieveBoard(int boardno) {
			Optional<Board> optionalBoard= repository.findById(boardno);
			Result result = new Result();
			
			if(optionalBoard.isPresent()) {
				result.setPayload(optionalBoard.get());
			}else {
				result.setEror(new ErrorResponse(ServiceResult.NOTEEXIST.toString()));
			}
			return result;
	}
}